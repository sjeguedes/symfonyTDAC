# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    # transferred from old config
    locale: en
    cache_type: file_system

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Controller\TaskController:
        arguments:
            $viewModelBuilder: '@App\View\Builder\TaskViewModelBuilder'
        bind:
            $createTaskHandler: '@App\Form\Handler\CreateTaskFormHandler'
            $editTaskHandler: '@App\Form\Handler\EditTaskFormHandler'
            $toggleTaskHandler: '@App\Form\Handler\ToggleTaskFormHandler'
            $deleteTaskHandler: '@App\Form\Handler\DeleteTaskFormHandler'

    # define data (entity) model factory as a generic service for corresponding custom interface
    App\Entity\Factory\DataModelFactory: ~
    App\Entity\Factory\DataModelFactoryInterface: '@App\Entity\Factory\DataModelFactory'

    # define task data model manager as a service
    App\Entity\Manager\TaskDataModelManager: ~

    # define services in this directory as Doctrine fixtures
    App\DataFixtures\:
        resource: '%kernel.project_dir%/src/DataFixtures/*'
        tags: ['doctrine.fixture.orm']

    # define task creation form handler as a service with concrete dependencies
    App\Form\Handler\CreateTaskFormHandler:
        arguments:
            $taskDataModelManager: '@App\Entity\Manager\TaskDataModelManager'

    # define task update form handler as a service with concrete dependencies
    App\Form\Handler\EditTaskFormHandler:
        arguments:
            $taskDataModelManager: '@App\Entity\Manager\TaskDataModelManager'

    # define task toggle form handler as a service with concrete dependencies
    App\Form\Handler\ToggleTaskFormHandler:
        arguments:
            $taskDataModelManager: '@App\Entity\Manager\TaskDataModelManager'

    # define task deletion form handler as a service with concrete dependencies
    App\Form\Handler\DeleteTaskFormHandler:
        arguments:
            $taskDataModelManager: '@App\Entity\Manager\TaskDataModelManager'

    # define task actions view model builder as a service
    App\View\Builder\TaskViewModelBuilder: ~

    # define flash bag as lazy service
    Symfony\Component\HttpFoundation\Session\Flash\FlashBag:
        lazy: true

    # define security token storage as lazy service
    Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage:
        lazy: true